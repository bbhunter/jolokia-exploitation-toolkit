#!/usr/bin/env python

import sys
import json
import requests
import os.path


def usage():
    print(
        f"""Usage:
    {sys.argv[0]} path/to/jolokia/list.json
    {sys.argv[0]} http://127.0.0.1:8080/jolokia"""
    )
    exit(42)


def jolokia_escape(string):
    for c in ["!", '"', "/"]:
        string = string.replace(c, f"!{c}")
    return string


if len(sys.argv) != 2 or "-h" in sys.argv or "--help" in sys.argv:
    usage()

uri = sys.argv[1].rstrip("/")
if uri.startswith("http://") or uri.startswith("https://"):
    if not uri.endswith("/jolokia"):
        usage()
    req = requests.get(f"{uri}/list", verify=False)
    blob = req.text
    base_url = uri
else:
    if not os.path.isfile(uri):
        print(f"File {uri} does not exist")
        usage()
    with open(uri, "r") as f:
        blob = f.read().strip()
    base_url = "/jolokia"

try:
    json_blob = json.loads(blob)
except Exception as e:
    print("Error: ", e)
    print("Couldn't parse the json blob, received:")
    print(blob)
    exit(42)

for package, mbeans in json_blob["value"].items():
    package = jolokia_escape(package)
    for mbean, props in mbeans.items():
        mbean = jolokia_escape(mbean)
        for prop in props:
            if prop == "desc":
                print("[+] DESC  :", props["desc"])
            elif prop == "attr":
                for method, method_props in props["attr"].items():
                    print(f"{base_url}/read/{package}:{mbean}/{method}")
                    if method_props["rw"]:
                        print(
                            f"{base_url}/write/{package}:{mbean}/{method}/${method_props['type']}"
                        )
            elif prop == "class":
                print("[+] CLASS :", props["class"])
            elif prop == "op":
                for method, method_props in props["op"].items():
                    if "desc" in method_props:
                        print(
                            "[+] DESC  :",
                            method_props["desc"],
                            f"// returns {method_props['ret']}",
                        )
                    if type(method_props) == dict:
                        method_props = [method_props]
                    for method_prop in method_props:
                        if len(method_prop["args"]) == 0:
                            print(f"{base_url}/exec/{package}:{mbean}/{method}")
                        else:
                            args = "/".join(
                                [f"${arg['type']}" for arg in method_prop["args"]]
                            )
                            print(f"{base_url}/exec/{package}:{mbean}/{method}/{args}")
            else:
                print(f"Unknown prop: {prop}")
                exit(42)
